package no.nav.aura.basta.rest.vm;

import static no.nav.aura.basta.rest.RestServiceTestUtils.createUriInfo;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Matchers.eq;
import static org.mockito.Mockito.when;

import java.net.URI;

import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriBuilder;

import no.nav.aura.basta.backend.vmware.orchestrator.request.FactType;
import no.nav.aura.basta.backend.vmware.orchestrator.request.KeyValue;
import no.nav.aura.basta.backend.vmware.orchestrator.request.ProvisionRequest;
import no.nav.aura.basta.domain.Order;
import no.nav.aura.basta.domain.input.EnvironmentClass;
import no.nav.aura.basta.domain.input.Zone;
import no.nav.aura.basta.domain.input.vm.VMOrderInput;
import no.nav.aura.envconfig.client.ApplicationInstanceDO;
import no.nav.aura.envconfig.client.ClusterDO;
import no.nav.aura.envconfig.client.DomainDO;
import no.nav.aura.envconfig.client.DomainDO.EnvClass;
import no.nav.aura.envconfig.client.NodeDO;
import no.nav.aura.envconfig.client.PlatformTypeDO;
import no.nav.aura.envconfig.client.ResourceTypeDO;
import no.nav.aura.envconfig.client.rest.PropertyElement;
import no.nav.aura.envconfig.client.rest.ResourceElement;

import org.junit.Before;
import org.junit.Test;

import com.google.common.collect.Lists;

public class OpenAMOrderRestServiceTest extends AbstractOrchestratorTest {

    private OpenAMOrderRestService ordersRestService;

    @Before
    public void setup() {
        ordersRestService = new OpenAMOrderRestService(orderRepository, orchestratorService, fasit);
        login("user", "user");
    }

    @Test
    public void orderAmServerShouldGiveNiceXml() {
        ResourceElement mockUser = createResource(ResourceTypeDO.Credential, "mockUser", new PropertyElement("username", "mockUser"), new PropertyElement("password", "--mocked--"));
        when(fasit.findResources(any(EnvClass.class), anyString(), any(DomainDO.class), anyString(), eq(ResourceTypeDO.Credential), anyString())).thenReturn(Lists.newArrayList(mockUser));
        mockOrchestratorProvision();

        VMOrderInput input = new VMOrderInput();
        input.setEnvironmentClass(EnvironmentClass.u);
        input.setEnvironmentName("u9");
        input.setZone(Zone.sbs);
        input.setServerCount(1);

        Response response = ordersRestService.createOpenAMServer(input.copy(), createUriInfo());
        Order order = getCreatedOrderFromResponseLocation(response);

        ProvisionRequest request = getAndValidateOrchestratorRequest(order.getId());

        // Check autogenerated password and mock this out for xml compare
        KeyValue ldapPasswdFact = findFact(FactType.cloud_openam_amldap_pwd, request);
        assertEquals(14, ldapPasswdFact.getValue().length());
        ldapPasswdFact.setValue("--generated--");
        // mock out urls for xml matching
        request.setResultCallbackUrl(URI.create("http://callback/result"));
        request.setStatusCallbackUrl(URI.create("http://callback/status"));
        assertRequestXML(request, "/orchestrator/request/openamserver_order.xml");
    }

    private KeyValue findFact(FactType expected, ProvisionRequest request) {
        for (KeyValue fact : request.getVms().get(0).getCustomFacts()) {
            if(expected.name().equals(fact.getName())){
                return fact;
            }
        }
        fail("Fact with name " + expected + " not found");
        return null;
    }

    @Test
    public void orderAmProxyShouldGiveNiceXml() {
        ApplicationInstanceDO appinstance = new ApplicationInstanceDO("openAm", "u9", UriBuilder.fromUri("https://junit"));
        ClusterDO cluster = new ClusterDO();
        NodeDO openamServerNode = new NodeDO();
        openamServerNode.setHostname("mocked.devillo.no");
        openamServerNode.setPlatformType(PlatformTypeDO.OPENAM_SERVER);
        cluster.addNode(openamServerNode);
        appinstance.setCluster(cluster);
        when(fasit.getApplicationInstance("u9", "openAm")).thenReturn(appinstance);
        mockOrchestratorProvision();

        VMOrderInput input = new VMOrderInput();
        input.setEnvironmentClass(EnvironmentClass.u);
        input.setEnvironmentName("u9");
        input.setServerCount(1);

        Response response = ordersRestService.createOpenProxy(input.copy(), createUriInfo());
        Order order = getCreatedOrderFromResponseLocation(response);

        ProvisionRequest request = getAndValidateOrchestratorRequest(order.getId());
        // mock out urls for xml matching
        request.setResultCallbackUrl(URI.create("http://callback/result"));
        request.setStatusCallbackUrl(URI.create("http://callback/status"));
        assertRequestXML(request, "/orchestrator/request/openamproxy_order.xml");
    }

}
