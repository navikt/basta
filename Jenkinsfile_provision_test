import groovy.json.JsonSlurper

node {
	def orderId, status, hostname
	def application = "basta"
	def mvnHome = tool "maven-3.3.9"
	def	mvn = "${mvnHome}/bin/mvn"
	
	withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'srvbasta', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
		def curlPostCmd = "curl -u ${env.USERNAME}:${env.PASSWORD} -H \"Accept: application/json\" -H \"Content-Type: application/json\" -X POST -d "
	}
	def curlGetCmd = "curl -X GET "
	def jsonInputJboss = "\"{\"nodeType\" : \"JBOSS\",\"environmentClass\" : \"u\",\"zone\" : \"fss\",\"applicationMappingName\" : \"jboss-testapp\",\"environmentName\" : \"cd-u1\",\"cpuCount\" : 2,\"serverCount\" : 1,\"memory\" : 2,\"extraDisk\" : 0,\"eapVersion\" : \"EAP7\",\"javaVersion\" : \"OpenJDK8\",\"classification\" : \"standard\"}\""
	def jsonInputWas = "\"{\"nodeType\" : \"WAS_NODES\",\"environmentClass\" : \"u\",\"zone\" : \"fss\",\"applicationMappingName\" : \"was-testapp\",\"environmentName\" : \"cd-u1\",\"cpuCount\" : 2,\"serverCount\" : 1,\"memory\" : 2,\"extraDisk\" : 0,\"wasVersion\" : \"WAS9\",\"classification\" : \"standard\"}\""
	def restUrlJboss = "\"https://basta.adeo.no/rest/vm/orders/jboss\""
	def restUrlWasNode = "\"https://basta.adeo.no/rest/vm/orders/was/node\""
	def restUrlOrderList = "\"https://basta.adeo.no/rest/orders/\""
	def restUrlDecommission = "\"https://basta.adeo.no/rest/vm/operations/decommission\""
	
	try {
		stage("checkout") {
			git url: "ssh://git@stash.devillo.no:7999/aura/${application}.git"
		}

		stage("Order and delete JBoss") {
			def response = sh "$curlPostCmd $jsonInputJboss $restUrlJboss"
			def orderCallback = new JsonSlurper().parse($response)
			orderId = orderCallback.id
			
			if (orderId?.trim()) {
			timeout(time: 25, unit: 'MINUTES') {
				while(status!="SUCCESS") {
					def statusResponse = sh "$curlGetCmd $restUrlOrderList/$orderId"
					def statusCallback = new JsonSlurper().parse($statusResponse)
					status = statusCallback.status
					
				}
			}
			}
			
			hostname = statusCallback.results.getAt(1..phrase.length() - 2)
			println "We have created host $hostname"
		}
		
		stage("Delete JBoss") {
			// Wait for provisioning to finish, checking every minute
			def decomResponse = sh "curlPostCmd \"{\"hostname\",\"$hostname\"}\" restUrlDecommision"
			def decomCallback = new JsonSlurper().parse($decomResponse)
			orderId = orderCallback.id
			
			timeout(time: 5, unit: 'MINUTES') {
				while(status!="SUCCESS") {
					def statusResponse = sh "$curlGetCmd $restUrlOrderList/orderId"
					def statusCallback = new JsonSlurper().parse($statusResponse)
					status = statusCallback.status
				}
			}
		}
		
		def emailBody = "basta:${releaseVersion} now in production. See jenkins for more info ${env.BUILD_URL}\n${changelog}"
		mail body: emailBody, from: "jenkins@aura.adeo.no", subject: "SUCCESSFULLY completed ${env.JOB_NAME}!", to: committerEmail
		def message = "Successfully deployed basta:${releaseVersion} to prod\n${changelog}\nhttps://${application}.adeo.no"

		hipchatSend color: 'GREEN', message: "${message}", textFormat: true, room: 'Aura - Automatisering', v2enabled: true
		
	} catch (e) {
		currentBuild.result = "FAILED"
		def message = "basta pipeline failed. See jenkins for more info ${env.BUILD_URL}\n${changelog}"
		hipchatSend color: 'RED', message: "@all ${env.JOB_NAME} failed\n${message}", textFormat: true, notify: true, room: 'AuraInternal', v2enabled: true
		throw e
	}
}
