node {
    def committer, changelog, releaseVersion // metadata
    def application = "basta"
    def mvnHome = tool "maven-3.3.9"
    def mvn = "${mvnHome}/bin/mvn"
    def clusterName = params.cluster
    def hostName = params.host
    def hostType = params.type
    def operation = params.operation

    if (!clusterName?.trim() || !hostName?.trim() || !operation?.trim()) {
      error "Missing parameters, aborting job"
    }

    try {
      stage("checkout") {
	      git credentialsId: 'navikt-ci',
	      url: "https://github.com/navikt/${application}.git"

        dir("nais-inventory") {
          git credentialsId: 'navikt-ci', 
          url: "https://github.com/navikt/nais-inventory.git"
        }

        dir("naisible") {
          git credentialsId: 'navikt-ci', 
          url: "https://github.com/nais/naisible.git, branch: 'coreos_based_naisible'"
        }

      }

	    stage("update inventory") {
        def fileName=nais-inventory/${clusterName} 
        if (operation == "ADD") {
          sh """
            echo "Adding new node ${hostName} to k8s cluster ${clusterName}" 
            if [[ ! grep -q ${hostName} ${fileName} ]]; then
              sed -i '/\\[workers\\]/a '"${hostName}'"' ${fileName}
              if [[ ! grep -q "\[coreos\]" ${fileName} ]]; then 
                sed -i 's/\\[all:vars\\]/\\[coreos\\]\\n\\n&/' ${fileName}
              fi

              sed -i '/\\[coreos\\]/a '"${hostName}'"' ${fileName}

              if [[ ${hostType} == "storage" ]]; then 
                sed -i '/\\[storage_nodes\\]/a '"${hostName}'"' ${fileName} 
              fi
            fi  
          """
        } else if (operation == "DELETE") {
          sh """
            echo "Deleting node ${hostName} from k8s cluster ${clusterName}" 
            if [[ grep -q ${hostName} ${fileName} ]]; then
              sed -i '/'"${hostName}'"/d' ${fileName}
            fi  
          """
        } else {
          error "Invalid operation" + operation
        }
      }

      stage("implement changes") {
        if (operation == "ADD") {
          sh """
            echo "Running naisible to update k8s cluster ${clusterName}" 
            cd naisible
            ansible-playbook  -i ../nais-inventory/${clusterName} setup-playbook.yaml
          """
        } else if (operation == "DELETE") {
          sh """
            echo "Running kubectl delete nodes for host ${hostName}" 
          """
        } else {
          error "Invalid operation" + operation
        }
      }

      stage("commit changes to git") {
        withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'srvauraautodeploy', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
          echo "Commit changes"
        }
      }

        def message = ":nais: Successfully deployed ${application}:${releaseVersion} to prod\n${changelog}\nhttps://${application}.adeo.no"
        slackSend channel: '#nais-ci', message: "${message}", teamDomain: 'nav-it', tokenCredentialId: 'slack_fasit_frontend'

        if (currentBuild.result == null) {
            currentBuild.result = "SUCCESS"
        }
    } catch (e) {
        if (currentBuild.result == null) {
            currentBuild.result = "FAILURE"
        }

        def message = ":shit: ${application} pipeline failed. See jenkins for more info ${env.BUILD_URL}\n${changelog}"
        slackSend channel: '#nais-ci', message: "${message}", teamDomain: 'nav-it', tokenCredentialId: 'slack_fasit_frontend'
        throw e
    }
}
